"use strict";!function i(u,c,s){function a(t,e){if(!c[t]){if(!u[t]){var n="function"==typeof require&&require;if(!e&&n)return n(t,!0);if(f)return f(t,!0);var r=new Error("Cannot find module '"+t+"'");throw r.code="MODULE_NOT_FOUND",r}var o=c[t]={exports:{}};u[t][0].call(o.exports,function(e){return a(u[t][1][e]||e)},o,o.exports,i,u,c,s)}return c[t].exports}for(var f="function"==typeof require&&require,e=0;e<s.length;e++)a(s[e]);return a}({1:[function(e,d,t){!function(){function u(n){return new Promise(function(e,t){n.onsuccess=function(){e(n.result)},n.onerror=function(){t(n.error)}})}function i(n,r,o){var i,e=new Promise(function(e,t){u(i=n[r].apply(n,o)).then(e,t)});return e.request=i,e}function e(e,n,t){t.forEach(function(t){Object.defineProperty(e.prototype,t,{get:function(){return this[n][t]},set:function(e){this[n][t]=e}})})}function t(t,n,r,e){e.forEach(function(e){e in r.prototype&&(t.prototype[e]=function(){return i(this[n],e,arguments)})})}function n(t,n,r,e){e.forEach(function(e){e in r.prototype&&(t.prototype[e]=function(){return this[n][e].apply(this[n],arguments)})})}function r(e,r,t,n){n.forEach(function(n){n in t.prototype&&(e.prototype[n]=function(){return e=this[r],(t=i(e,n,arguments)).then(function(e){if(e)return new c(e,t.request)});var e,t})})}function o(e){this._index=e}function c(e,t){this._cursor=e,this._request=t}function s(e){this._store=e}function a(n){this._tx=n,this.complete=new Promise(function(e,t){n.oncomplete=function(){e()},n.onerror=function(){t(n.error)},n.onabort=function(){t(n.error)}})}function f(e,t,n){this._db=e,this.oldVersion=t,this.transaction=new a(n)}function l(e){this._db=e}e(o,"_index",["name","keyPath","multiEntry","unique"]),t(o,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),r(o,"_index",IDBIndex,["openCursor","openKeyCursor"]),e(c,"_cursor",["direction","key","primaryKey","value"]),t(c,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(n){n in IDBCursor.prototype&&(c.prototype[n]=function(){var t=this,e=arguments;return Promise.resolve().then(function(){return t._cursor[n].apply(t._cursor,e),u(t._request).then(function(e){if(e)return new c(e,t._request)})})})}),s.prototype.createIndex=function(){return new o(this._store.createIndex.apply(this._store,arguments))},s.prototype.index=function(){return new o(this._store.index.apply(this._store,arguments))},e(s,"_store",["name","keyPath","indexNames","autoIncrement"]),t(s,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),r(s,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),n(s,"_store",IDBObjectStore,["deleteIndex"]),a.prototype.objectStore=function(){return new s(this._tx.objectStore.apply(this._tx,arguments))},e(a,"_tx",["objectStoreNames","mode"]),n(a,"_tx",IDBTransaction,["abort"]),f.prototype.createObjectStore=function(){return new s(this._db.createObjectStore.apply(this._db,arguments))},e(f,"_db",["name","version","objectStoreNames"]),n(f,"_db",IDBDatabase,["deleteObjectStore","close"]),l.prototype.transaction=function(){return new a(this._db.transaction.apply(this._db,arguments))},e(l,"_db",["name","version","objectStoreNames"]),n(l,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(i){[s,o].forEach(function(e){i in e.prototype&&(e.prototype[i.replace("open","iterate")]=function(){var e,t=(e=arguments,Array.prototype.slice.call(e)),n=t[t.length-1],r=this._store||this._index,o=r[i].apply(r,t.slice(0,-1));o.onsuccess=function(){n(o.result)}})})}),[o,s].forEach(function(e){e.prototype.getAll||(e.prototype.getAll=function(e,n){var r=this,o=[];return new Promise(function(t){r.iterateCursor(e,function(e){e?(o.push(e.value),void 0===n||o.length!=n?e.continue():t(o)):t(o)})})})});var p={open:function(e,t,n){var r=i(indexedDB,"open",[e,t]),o=r.request;return o&&(o.onupgradeneeded=function(e){n&&n(new f(o.result,e.oldVersion,o.transaction))}),r.then(function(e){return new l(e)})},delete:function(e){return i(indexedDB,"deleteDatabase",[e])}};void 0!==d?(d.exports=p,d.exports.default=d.exports):self.idb=p}()},{}],2:[function(e,t,n){t.exports=function(){var i=e("idb").open("test-db",1,function(e){switch(e.oldVersion){case 0:e.createObjectStore("currencies",{keyPath:"pair"})}});window.fetch("https://free.currencyconverterapi.com/api/v5/currencies").then(function(e){return e.json()}).then(function(e){return e.results}).then(function(e){var t=Object.values(e),n=[],r=!0,o=!1,i=void 0;try{for(var u,c=t[Symbol.iterator]();!(r=(u=c.next()).done);r=!0){var s=u.value;n.push(s.id)}}catch(e){o=!0,i=e}finally{try{!r&&c.return&&c.return()}finally{if(o)throw i}}return n}).then(function(e){for(var t=[],n=0;n<e.length-1;n++)for(var r=n+1;r<e.length;r++)t.push(e[n]+"_"+e[r]);return t}).then(function(o){for(var e=function(r){var e="https://free.currencyconverterapi.com/api/v5/convert?q="+o[r];window.fetch(e).then(function(e){return e.json()}).then(function(e){var t=e.results;t=Object.values(t)[0].val;var n={pair:o[r],value:t};return console.log(n),n}).then(function(n){i.then(function(e){var t=e.transaction("currencies","readwrite");return t.objectStore("currencies").put(n),t.complete})})},t=0;t<o.length;t++)e(t)})}},{idb:1}],3:[function(e,t,n){t.exports=function(){if(navigator.serviceWorker){navigator.serviceWorker.register("js/sw-bundle.min.js").then(function(e){navigator.serviceWorker.controller&&(e.waiting?console.log("service worker waiting"):e.installing?console.log("service worker installing"):e.addEventListener("updatefound",function(){console.log("service worker updated")}))});var e=void 0;navigator.serviceWorker.addEventListener("controllerchange",function(){e||(window.location.reload(),e=!0)})}}},{}],4:[function(e,t,n){e("./lib/idb.js");e("./lib/reg_sw.js")();var i=document.getElementById("fromSelect"),u=document.getElementById("toSelect"),c=document.getElementById("fromInput"),s=document.getElementById("toInput");function r(e){var t,n,o,r;(isNaN(c.value)||c.value<0)&&(s.value="Please enter a number greater than zero",s.style.fontSize="1rem"),""!==c.value&&(t=i.value,n=u.value,o=c.value,r="https://free.currencyconverterapi.com/api/v5/convert?q="+t+"_"+n,fetch(r)&&fetch(r).then(function(e){return e.json()}).then(function(e){var t=e.results,n=t[Object.keys(t)].val,r=o*n;r=r.toFixed(2),s.value=r}),s.style.fontSize="2rem")}function o(e){var t=e.key;8!==t&&48!==t&&""!==c.value||(s.value="")}c.addEventListener("keyup",r),c.addEventListener("keyup",o),i.addEventListener("change",r),u.addEventListener("change",r)},{"./lib/idb.js":2,"./lib/reg_sw.js":3}]},{},[4]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
